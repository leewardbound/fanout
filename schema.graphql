schema {
  query: Query
  mutation: Mutation
}

type Activity {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  verb: ActivityVerb!
  payload: JSONString
  objectId: String
  targetId: String
  relatedObjectId: String
  objectType: String
  note: Note
  image: Image
}

enum ActivityVerb {
  ACCEPT
  ADD
  ANNOUNCE
  ARRIVE
  BLOCK
  CREATE
  DELETE
  DISLIKE
  FLAG
  FOLLOW
  IGNORE
  INVITE
  JOIN
  LEAVE
  LIKE
  LISTEN
  MOVE
  OFFER
  QUESTION
  REJECT
  READ
  REMOVE
  SHARE
  TENTATIVEREJECT
  TENTATIVEACCEPT
  TRAVEL
  UNDO
  UPDATE
  VIEW
}

type CreateNote {
  activity: Activity
}

input CreateNoteInput {
  actorId: String!
  content: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

union CreateUserResult = UserProfile | Error

type Customer {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  relatedUser: UserProfile
  datapoints: [CustomerDataPoint]
}

type CustomerDataPoint {
  key: String
  value: String
}

input CustomerDataPointInput {
  key: String!
  value: String!
}

scalar DateTime

type Error {
  message: String!
}

scalar ExpectedErrorType

scalar GenericScalar

type Image {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  contentUrl: String!
}

scalar JSONString

type Mutation {
  createNote(input: CreateNoteInput): CreateNote
  subscribeByEmail(input: SubscribeByEmailInput): SubscribeByEmail
  register(email: String!, username: String!, firstName: String!, lastName: String!, password1: String!, password2: String!): Register
  verifyAccount(token: String!): VerifyAccount
  tokenAuth(password: String!, email_Iexact: String, username_Iexact: String): ObtainJSONWebToken
  verifyToken(token: String!): VerifyToken
  refreshToken(refreshToken: String!): RefreshToken
  resendActivationEmail(email: String!): ResendActivationEmail
  sendPasswordResetEmail(email: String!): SendPasswordResetEmail
  passwordReset(token: String!, newPassword1: String!, newPassword2: String!): PasswordReset
  passwordChange(oldPassword: String!, newPassword1: String!, newPassword2: String!): PasswordChange
  updateAccount(firstName: String, lastName: String): UpdateAccount
  createUser(input: CreateUserInput): CreateUserResult
}

interface Node {
  id: ID!
}

type Note {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  content: String!
}

type ObtainJSONWebToken {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  refreshToken: String
}

type PasswordChange {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

type PasswordReset {
  success: Boolean
  errors: ExpectedErrorType
}

type Query {
  activities(actorId: ID!): [Activity]
  myProfile: UserProfile
}

type RefreshToken {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
}

type Register {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

type ResendActivationEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type SendPasswordResetEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type SubscribeByEmail {
  email: String
  datapoints: [CustomerDataPoint]
  created: Boolean
}

input SubscribeByEmailInput {
  actorId: String!
  email: String!
  datapoints: [CustomerDataPointInput]
}

scalar UUID

type UpdateAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type UserNode implements Node {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  id: ID!
  lastLogin: DateTime
  isActive: Boolean!
  dateJoined: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  relatedCustomer: Customer
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserProfile {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  id: UUID!
  verified: Boolean
}

type VerifyAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type VerifyToken {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
}
